use std::{cell::RefCell, rc::Rc};

use crate::{
    property::{Property, PropertyGroup, Rent},
    utils::Ref,
};

const NUM_CELLS: usize = 40;

/// Represents a position on the board.
#[derive(Debug)]
enum BoardCell {
    /// The initial position of all player.
    ///
    /// Collect $200 if this is passed.
    Go,

    /// The various community chest cards.
    CommunityChest,

    /// Income and luxury taxes.
    ///
    /// Contains the tax amount.
    Tax(usize),

    /// The various chance cards.
    Chance,

    /// The jail position (Visiting or in jail).
    Jail,

    /// Contains the money stored in free parking.
    ///
    /// First player to land on it gets the money stored here.
    ///
    /// All taxes and fines will go to free parking.
    FreeParking(usize),

    /// Send a player to jail.
    GoToJail,

    /// A property.
    Property(Property),
}

#[derive(Debug)]
struct ChanceCard {}

#[derive(Debug)]
struct CommunityChestCard {}

#[derive(Debug)]
struct Board {
    /// All possible positions on the board.
    cells: Vec<Ref<BoardCell>>,

    /// All possible chance cards.
    chance_cards: Vec<Ref<ChanceCard>>,

    /// All possible community chest cards.
    community_chest_cards: Vec<Ref<CommunityChestCard>>,
}

impl Board {
    fn new() -> Self {
        // Initialize board
        let mut cells = Vec::with_capacity(NUM_CELLS);
        {
            cells.push(Rc::new(RefCell::new(BoardCell::Go)));
            cells.push(Rc::new(RefCell::new(BoardCell::Property(Property {
                name: "Mediterranean Avenue".into(),
                group: PropertyGroup::Brown,
                price: 60,
                mortgage: 30,
                building: (true, 50),
                rent: Rent::Property {
                    base: 2,
                    monopoly: 4,
                    house1: 10,
                    house2: 30,
                    house3: 90,
                    house4: 160,
                    hotel: 250,
                },
                owner: None,
            }))));
            cells.push(Rc::new(RefCell::new(BoardCell::CommunityChest)));
            cells.push(Rc::new(RefCell::new(BoardCell::Property(Property {
                name: "Baltic Avenue".into(),
                group: PropertyGroup::Brown,
                price: 60,
                mortgage: 30,
                building: (true, 50),
                rent: Rent::Property {
                    base: 4,
                    monopoly: 8,
                    house1: 20,
                    house2: 60,
                    house3: 180,
                    house4: 320,
                    hotel: 450,
                },
                owner: None,
            }))));
            cells.push(Rc::new(RefCell::new(BoardCell::Tax(200)))); // Income tax
            cells.push(Rc::new(RefCell::new(BoardCell::Property(Property {
                name: "Reading Railroad".into(),
                group: PropertyGroup::Railroad,
                price: 200,
                mortgage: 100,
                building: (false, 0),
                rent: Rent::Railroad {
                    owned1: 25,
                    owned2: 50,
                    owned3: 100,
                    owned4: 200,
                },
                owner: None,
            }))));
            cells.push(Rc::new(RefCell::new(BoardCell::Property(Property {
                name: "Oriental Avenue".into(),
                group: PropertyGroup::LightBlue,
                price: 100,
                mortgage: 50,
                building: (true, 50),
                rent: Rent::Property {
                    base: 6,
                    monopoly: 12,
                    house1: 30,
                    house2: 90,
                    house3: 270,
                    house4: 400,
                    hotel: 550,
                },
                owner: None,
            }))));
            cells.push(Rc::new(RefCell::new(BoardCell::Chance)));
            cells.push(Rc::new(RefCell::new(BoardCell::Property(Property {
                name: "Vermont Avenue".into(),
                group: PropertyGroup::LightBlue,
                price: 100,
                mortgage: 50,
                building: (true, 50),
                rent: Rent::Property {
                    base: 6,
                    monopoly: 12,
                    house1: 30,
                    house2: 90,
                    house3: 270,
                    house4: 400,
                    hotel: 550,
                },
                owner: None,
            }))));
            cells.push(Rc::new(RefCell::new(BoardCell::Property(Property {
                name: "Connecticut Avenue".into(),
                group: PropertyGroup::LightBlue,
                price: 120,
                mortgage: 60,
                building: (true, 50),
                rent: Rent::Property {
                    base: 8,
                    monopoly: 16,
                    house1: 40,
                    house2: 100,
                    house3: 300,
                    house4: 450,
                    hotel: 600,
                },
                owner: None,
            }))));
            cells.push(Rc::new(RefCell::new(BoardCell::Jail)));
            cells.push(Rc::new(RefCell::new(BoardCell::Property(Property {
                name: "St. Charles Place".into(),
                group: PropertyGroup::Pink,
                price: 140,
                mortgage: 70,
                building: (true, 100),
                rent: Rent::Property {
                    base: 10,
                    monopoly: 20,
                    house1: 50,
                    house2: 150,
                    house3: 450,
                    house4: 625,
                    hotel: 750,
                },
                owner: None,
            }))));
            cells.push(Rc::new(RefCell::new(BoardCell::Property(Property {
                name: "Electric Company".into(),
                group: PropertyGroup::Utility,
                price: 140,
                mortgage: 70,
                building: (true, 100),
                rent: Rent::Utility {
                    base: 4,
                    monopoly: 10,
                },
                owner: None,
            }))));
        }

        todo!()
    }
}
